#!/bin/bash

USAGES="/var/lib/innproxy/users/"
USERS="/var/lib/innproxy/users.json"
JQ="/usr/local/bin/jq" # Need newer version which provides 'has()' function

usage() {
	(
		flock -x 0
		# Record usage as given by firewalls
		failsafe
		# Initialize bytes to zero
		$JQ "(.[] | .bytes) = 0" <$USERS >"$USERS.$$" && mv "$USERS.$$" "$USERS"
		# Set bytes to actual usage since checkout
		OLDIFS=$IFS
		IFS=,
		awkp='{t[$2]+=$1} END {for (i in t) {printf "%10d,%s\n",t[i],i} }'
		find "$USAGES" -name '*usage.csv' -exec cat {} \; | awk -F, "$awkp" | while read bytes user; do
			bytes=$(echo "$bytes" | awk '{print $1}')
			jqp="if has(\"$user\") then .[\"$user\"].bytes=$bytes else . end"
			$JQ "$jqp" <"$USERS" >"$USERS.$$" && mv "$USERS.$$" "$USERS"
		done
		IFS=$OLDIFS
		chown www-data.www-data "$USERS"
		restore "usage"
	) <"$USERS"
}

# $JQ "(.[] | select(.bytes > $OVERUSE) | .disabled) = true"  <$USERS >"$USERS.$$" && mv "$USERS.$$" "$USERS"
expired() {
	# Remove expired users
	now=$(date +%s)
	# Select only users whose remaining time is less than stay, or who are not active yet (e.g. diner users)
	jqp=".[] | {(.user):select(($now - .active <= .stay) or (.active == 0))}"
	s1='s/^{//g'		# Remove open {
	s2='s/}$/,/g'		# Replace } with ,
	s3='$ s/},$/}/g'	# Except no , on last line 
	(
		flock -x 0
		failsafe
		( echo "{"; jq -c "$jqp" <$USERS | sed -e "$s1" -e "$s2" -e "$s3"; echo "}" ) >"$USERS.$$" && mv "$USERS.$$" "$USERS"
		chown www-data.www-data "$USERS"
		restore "expired"
	) <"$USERS"
}

activate() {
	# Activate users who have just logged in but were not active yet
	now=$(date +%s)
	# Only modify users who have an IP address but whose active date is zero
	jqp="(.[] | {(.user):select(.ipaddr != \"\" and .active == 0)} | .active) = $now"
	s1='s/^{//g'		# Remove open {
	s2='s/}$/,/g'		# Replace } with ,
	s3='$ s/},$/}/g'	# Except no , on last line 
	(
		flock -x 0
		failsafe
		( echo "{"; jq -c "$jqp" <$USERS | sed -e "$s1" -e "$s2" -e "$s3"; echo "}" ) >"$USERS.$$" && mv "$USERS.$$" "$USERS"
		chown www-data.www-data "$USERS"
		restore "activate"
	) <"$USERS"
}

failsafe() {
	size=$(stat -c "%s" "$USERS")
	if [ "$size" -gt 10 ]; then
		cp "$USERS" "$USERS.failsafe"
	fi
}

restore() {
	stage=$1
	size=$(stat -c "%s" "$USERS")
	if [ "$size" -le 10 ]; then
		cp "$USERS.failsafe" "$USERS"
		echo "ERROR: Had to restore $USERS in stage $stage"
	fi
}

usagewatch() {
	date +"%D %T: usage"
	usage
	date +"%D %T: activate"
	activate
	date +"%D %T: expired"
	expired
	date +"%D %T: timeouts"
	/usr/local/bin/timeouts
	date +"%D %T: result"
	jq . <"$USERS"
}

while [ true ]; do
	usagewatch >/var/log/usagewatch.log 2>&1 </dev/null
	sleep 60
done
