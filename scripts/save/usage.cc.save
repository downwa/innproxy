#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <errno.h>
#include <time.h>

#include <map>
#include <string>
#include <iostream>

using namespace std;

#define LOG  "/var/log/zentyal-captiveportal/access.log"
#define SLOG "/var/log/squid3/access.log"

char ips[256]; // Mark IPs used by this uid with *, blank otherwise.

void ipuser(int uid) {
	FILE *fp=fopen(LOG,"rb");
	char buf[60];
	char patt[32];
	char ipu[60]={0};
	char oipu[60]={0};
	memset(ips,' ',sizeof(ips)-1);
	ips[255]=0;
	while(!feof(fp) && fgets(buf,sizeof(buf),fp)) {
		char *pp=strchr(buf,']');
		if(pp) { *pp=0; }
		snprintf(patt,sizeof(patt)," - %d ",uid);
		pp=strchr(buf,'[');
		if(pp) { int len=pp-buf; strncpy(ipu,buf,len); ipu[len]=0; }
		if(pp && strncmp(buf,"192.168.2.",10)==0 && strstr(buf,patt) && strcmp(ipu,oipu)!=0) {
			int ipa=atoi(&buf[10]);
			ips[ipa]='*';


// Transform e.g. [20/Jan/2014:18:27:16 -0900" | sed -e 's@\[\([0-9]*\)/\(.*\)/\([0-9]*\):@\1 \2 \3 @g'
// 20 Jan 2014 18:27:16 -0900
			
//			char *result=strptime(pp, "[%d/%s/%4d:%d:%d:%d -%04d", struct tm *tm);	

			printf("%d: %s\n",ipa,buf);
			strncpy(oipu,ipu,sizeof(oipu));
		}
	}
	fclose(fp);
	for(int xa=1; xa<256; xa++) {
		if(ips[xa]=='*') { printf("ip=192.168.200.%d\n",xa); }
	}
}

void listips(int uid) {
}

/*** NOTE: LogFormat "%h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\" \"%{forensic-id}n\" \"%{Cookie}i\"" combined-cookie
  1=remote host
  2=remote log name
  3=remote user
  4=time request rec'd
  5=first line of req
  6=status of last req (after redirects)
  7=response bytes excluding headers (- if no bytes sent)

e.g 192.168.2.123 - - [16/Dec/2013:03:26:58 -0900] "GET /xmls/samsung/sgs2/gen.xml HTTP/1.1" 302 277 
    HOST              TIME                         REQ                                       STS BYT
 "-" "Dalvik/1.4.0 (Linux; U; Android 2.3.4; GT-I9100 Build/GINGERBREAD)" "-" "-"
 RFR USERAGENT                                                            FID COOKIE
****/

map<string, int> userUsage;
map<string, string> ipUsers;

void tabulate(char *ip, char *uid, int bytes) {
	string uidStr="(unknown)";
	string ipStr=string(ip);
	if(strcmp(uid,"-") != 0) { uidStr=string(uid); ipUsers[ipStr]=uidStr; }
	else { uidStr=ipUsers[ipStr]; }
	userUsage[uidStr]+=bytes;
}

void report() {
}

void parselog1() {
	char buf[65536];
	char buf2[65536];
	FILE *fp=popen("./tailogcp","r");
	if(!fp) { fprintf(stderr,"./tailogcp: %s\n",strerror(errno)); exit(1); }
	int count=0;
	while(!feof(fp) && fgets(buf,sizeof(buf),fp)) {
		int blen=strlen(buf);
		for(int xa=blen; xa<blen+32; xa++) { buf[xa]=0; }

		strncpy(buf2,buf,sizeof(buf2));

		char *ip=buf;

		char *pp=strchr(buf,' ');
		if(pp) { *pp=0; pp++; } // log name '-'
		else { fprintf(stderr,"parse error2: %s\n",buf); exit(1); }
		char *logname=pp;

		pp=strchr(pp,' ');
		if(pp) { *pp=0; pp++; } // user or '-'
		else { fprintf(stderr,"parse error3: %s\n",logname); exit(1); }
		char *uid=pp;

		pp=strchr(pp,' ');
		if(pp) { *pp=0; pp++; } // time req rec'd
		else { fprintf(stderr,"parse error4: %s\n",uid); exit(1); }
		char *time=&pp[1]; // Skip '['

		pp=strchr(pp,']'); // end of time
		if(pp) { *pp=0; pp+=3; } // first line of req
		else { fprintf(stderr,"parse error5: %s\n",time); exit(1); }
		char *req=pp;

		pp=strchr(pp,'"'); // end of req
		if(pp) { *pp=0; pp+=2; } // req status
		else { fprintf(stderr,"parse error6: %s\n",req); exit(1); }
		char *reqstsLine=pp;
		int reqsts=atoi(reqstsLine);

		pp=strchr(pp,' '); // end of status
		if(pp) { *pp=0; pp++; } // response bytes
		else { fprintf(stderr,"parse error7: %s\n",reqstsLine); exit(1); }
		char *bytesLine=pp;
		int bytes=atoi(bytesLine);
		
		pp=strchr(pp,'"'); // start referer
		if(pp) { pp++; } // referer
		else { fprintf(stderr,"parse error8: %s\n",bytesLine); exit(1); }
		char *referer=pp;

/***
 "-" "Dalvik/1.4.0 (Linux; U; Android 2.3.4; GT-I9100 Build/GINGERBREAD)" "-" "-"
 RFR USERAGENT                                                            FID COOKIE
****/
		pp=strchr(pp,'"'); // end referer
		if(pp) { *pp=0; pp+=3; } // user agent
		else { fprintf(stderr,"parse error9: %s\n",referer); exit(1); }
		char *agent=pp;

		pp=strchr(pp,'"'); // end agent
		if(pp) { *pp=0; pp+=3; } // fid
		else { fprintf(stderr,"parse error10: %s\n",agent); exit(1); }
		char *fid=pp;

		pp=strchr(pp,'"'); // end fid
		if(pp) { *pp=0; pp+=3; } // cookie
		else { fprintf(stderr,"parse error11: %s\n",fid); exit(1); }
		char *cookie=pp;

		if(*cookie == 0) { continue; }
		pp=strchr(pp,'"'); // end cookie
		if(pp) { *pp=0; }
		else { fprintf(stderr,"parse error12: %s fid=%s cookie=%s; buf2=%s\n",req,fid,cookie,buf2); exit(1); }

		if(count%10 == 0) { fprintf(stderr,"count=%06d\r",count); }
		count++;

		tabulate(ip, uid, bytes);
	}
	fclose(fp);
}

int main(int argc, char **argv) {
	//ipuser(202);
	parselog1();
}
